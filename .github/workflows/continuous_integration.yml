name: continuous-integration

# TODO: build master branch after PRs are merged.
# syntax https://help.github.com/en/articles/workflow-syntax-for-github-actions
on:
  schedule:
  - cron: '0 2 * * *'
  push:
    branches: 
      - master
      - camsknee
    tags:
      - '*'
    
jobs:
  windows:
    name: Windows

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install Doxygen
      # choco install doxygen.portable # <-- too unreliable.
      run: |
        (New-Object System.Net.WebClient).DownloadFile("https://sourceforge.net/projects/myosin/files/doxygen-1.8.14.windows.x64.bin.zip/download", "doxygen.zip")
        7z x $env:GITHUB_WORKSPACE/doxygen.zip -odoxygen
        echo "::add-path::$env:GITHUB_WORKSPACE\\doxygen"

    - name: Install Chocolatey packages
      run: choco install swig --version 3.0.12 --yes --limit-output

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/opensim_dependencies_install
        # Every time a cache is created, it's stored with this key.
        # In subsequent runs, if the key matches the key of an existing cache,
        # then the cache is used. We chose for this key to depend on the
        # operating system and a hash of the hashes of all files in the
        # dependencies directory (non-recursive).
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}
      
    - name: Build dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        echo $env:GITHUB_WORKSPACE\\build_deps
        mkdir $env:GITHUB_WORKSPACE\\build_deps
        chdir $env:GITHUB_WORKSPACE\\build_deps
        cmake --version
        cmake $env:GITHUB_WORKSPACE\\dependencies -G"Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install
        cmake . -LAH
        cmake --build . --config Release -- /maxcpucount:4

    - name: Configure OpenSim
      id: configure-opensim
      run: |
        mkdir $env:GITHUB_WORKSPACE\\build 
        chdir $env:GITHUB_WORKSPACE\\build
        # Turn warnings into errors.
        $env:CXXFLAGS = "/WX"
        cmake $env:GITHUB_WORKSPACE -G"Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=~/opensim-core -DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install -DWITH_BTK=on -DBUILD_PYTHON_WRAPPING=on -DBUILD_JAVA_WRAPPING=on
        $env:CXXFLAGS = ""
        cmake . -LAH

    - name: Build OpenSim
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        cmake --build . --config Release -- /maxcpucount:4

    - name: Test OpenSim
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        ctest --parallel 4 --output-on-failure --build-config Release

    - name: Install OpenSim
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        cmake --build . --config Release --target doxygen -- /maxcpucount:4 /verbosity:quiet
        cmake --build . --config Release --target install -- /maxcpucount:4 /verbosity:quiet

        chdir $env:GITHUB_WORKSPACE
        move ~/opensim-core opensim-core

    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions
    - name: Upload OpenSim
      uses: actions/upload-artifact@v1.0.0
      with:
        name: opensim-core-win
        path: opensim-core

    - name: Upload OpenSim to Sourceforge
      shell: bash
      run: |
        # Save the private SSH key to a file.
        echo $GHACTIONS_DEPLOY_MYOSIN_SOURCEFORGE_RSA > $TEMP/ghactions_deploy_myosin_sourceforge_rsa
        # Start the ssh agent.
        eval "$(ssh-agent -s)"
        # Register this private key with the GitHub Actions runner.
        chmod 600 $TEMP/ghactions_deploy_myosin_sourceforge_rsa
        ssh-add $TEMP/ghactions_deploy_myosin_sourceforge_rsa
        # Rename the ZIP.
        mv opensim-core.zip opensim-core-win.zip
        # Upload.
        rsync --archive --compress --verbose opensim-core-win.zip opensim-bot@frs.sourceforge.net:/home/frs/project/myosin/github-actions/opensim-core/

  mac:
    name: Mac

    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v1

    - name: Testing
      run: |
        # Save the private SSH key to a file.
        echo $TESTING > /tmp/testing
        cat /tmp/testing
        echo 'hi'
        echo ${{ secrets.TESTING }} > /tmp/testing2
        cat /tmp/testing2
        # Start the ssh agent.
        eval "$(ssh-agent -s)"
        # Register this private key with the GitHub Actions runner.
        chmod 600 /tmp/testing
        ssh-add /tmp/testing

    - name: Check for tabs in source code
      # GREP returns 0 (true) if there are any matches, and
      # we don't want any matches. If there are matches,
      # print a helpful message, and make the test fail by using "false".
      # The GREP command here checks for any tab characters in the files
      # that match the specified pattern. GREP does not pick up explicit tabs
      # (e.g., literally a \t in a source file).
      run: |
        if grep --line-num --recursive --exclude-dir="*dependencies*" --include={CMakeLists.txt,*.cpp,*.c,*.h} -P "\t" . ; then echo "Tabs found in the lines shown above. See CONTRIBUTING.md about tabs."; false; fi

    - name: Install Homebrew packages
      run: |
        brew install doxygen swig@3

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/opensim_dependencies_install
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}

    - name: Build dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        mkdir $GITHUB_WORKSPACE/build_deps && cd $GITHUB_WORKSPACE/build_deps
        DEP_CMAKE_ARGS=($GITHUB_WORKSPACE/dependencies)
        DEP_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install)
        DEP_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        DEP_CMAKE_ARGS+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=10.10)
        printf '%s\n' "${DEP_CMAKE_ARGS[@]}"
        cmake "${DEP_CMAKE_ARGS[@]}"
        cmake . -LAH
        make --jobs 4

    - name: Configure OpenSim
      id: configure-opensim
      run: |
        mkdir $GITHUB_WORKSPACE/build && cd $GITHUB_WORKSPACE/build
        OSIM_CMAKE_ARGS=($GITHUB_WORKSPACE)
        OSIM_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim-core)
        OSIM_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install)
        OSIM_CMAKE_ARGS+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=10.10)
        OSIM_CMAKE_ARGS+=(-DWITH_BTK=on)
        OSIM_CMAKE_ARGS+=(-DBUILD_PYTHON_WRAPPING=on -DBUILD_JAVA_WRAPPING=on -DSWIG_EXECUTABLE=/usr/local/opt/swig@3/bin/swig)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_INSTALL_UNIX_FHS=OFF)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DOXYGEN_USE_MATHJAX=off)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_SIMBODY_DOXYGEN_LOCATION="https://simbody.github.io/latest/")
        OSIM_CMAKE_ARGS+=(-DCMAKE_CXX_FLAGS="-Werror")
        printf '%s\n' "${OSIM_CMAKE_ARGS[@]}" 
        cmake "${OSIM_CMAKE_ARGS[@]}"
        cmake . -LAH

    - name: Build OpenSim
      run: |
        cd $GITHUB_WORKSPACE/build
        make --jobs 4

    - name: Test OpenSim
      run: |
        cd $GITHUB_WORKSPACE/build
        ctest --parallel 4 --output-on-failure

    - name: Install OpenSim
      run: |
        cd $GITHUB_WORKSPACE/build
        make doxygen
        make install

        cd $GITHUB_WORKSPACE
        mv ~/opensim-core opensim-core
        zip --symlinks --recurse-paths --quiet opensim-core.zip opensim-core

    - name: Upload OpenSim artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # The upload-artifact zipping does not preserve symlinks or executable
        # bits. So we zip ourselves, even though this causes a double-zip.
        name: opensim-core-mac
        path: opensim-core.zip

    - name: Upload OpenSim to Sourceforge
      run: |
        # Save the private SSH key to a file.
        echo $GHACTIONS_DEPLOY_MYOSIN_SOURCEFORGE_RSA > /tmp/ghactions_deploy_myosin_sourceforge_rsa
        # Start the ssh agent.
        eval "$(ssh-agent -s)"
        # Register this private key with the GitHub Actions runner.
        chmod 600 /tmp/ghactions_deploy_myosin_sourceforge_rsa
        ssh-add /tmp/ghactions_deploy_myosin_sourceforge_rsa
        # Rename the ZIP.
        mv opensim-core.zip opensim-core-mac.zip
        # Upload.
        rsync --archive --compress --verbose opensim-core-mac.zip opensim-bot@frs.sourceforge.net:/home/frs/project/myosin/github-actions/opensim-core/

  ubuntu:
    name: Ubuntu

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1
    - name: Install packages
      run: sudo apt-get install --yes liblapack-dev freeglut3-dev libxi-dev libxmu-dev doxygen python3 python3-dev python3-numpy python3-setuptools swig

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/opensim_dependencies_install
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}

    - name: Build dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        mkdir $GITHUB_WORKSPACE/build_deps && cd $GITHUB_WORKSPACE/build_deps
        DEP_CMAKE_ARGS=($GITHUB_WORKSPACE/dependencies)
        DEP_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install)
        DEP_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        printf '%s\n' "${DEP_CMAKE_ARGS[@]}"
        cmake "${DEP_CMAKE_ARGS[@]}"
        cmake . -LAH
        make --jobs 4

    - name: Configure OpenSim
      id: configure-opensim
      run: |
        mkdir $GITHUB_WORKSPACE/build && cd $GITHUB_WORKSPACE/build
        OSIM_CMAKE_ARGS=($GITHUB_WORKSPACE)
        OSIM_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim-core)
        OSIM_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install)
        OSIM_CMAKE_ARGS+=(-DWITH_BTK=on)
        OSIM_CMAKE_ARGS+=(-DBUILD_PYTHON_WRAPPING=on -DBUILD_JAVA_WRAPPING=on)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_INSTALL_UNIX_FHS=OFF)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DOXYGEN_USE_MATHJAX=off)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_SIMBODY_DOXYGEN_LOCATION="https://simbody.github.io/latest/")
        # OSIM_CMAKE_ARGS+=(-DCMAKE_CXX_FLAGS="-Werror")
        printf '%s\n' "${OSIM_CMAKE_ARGS[@]}"
        cmake "${OSIM_CMAKE_ARGS[@]}"
        cmake . -LAH

    - name: Build OpenSim
      run: |
        cd $GITHUB_WORKSPACE/build
        make --jobs 4

    - name: Test OpenSim
      run: |
        cd $GITHUB_WORKSPACE/build
        # TODO: Temporary for python to find Simbody libraries.
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/opensim_dependencies_install/simbody/lib
        ctest --parallel 4 --output-on-failure

    - name: Install OpenSim
      run: |
        cd $GITHUB_WORKSPACE/build
        make doxygen
        make install

        cd $GITHUB_WORKSPACE
        mv ~/opensim-core opensim-core
        zip --symlinks --recurse-paths --quiet opensim-core.zip opensim-core

    - name: Upload OpenSim artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # The upload-artifact zipping does not preserve symlinks or executable
        # bits. So we zip ourselves, even though this causes a double-zip.
        name: opensim-core-ubuntu
        path: opensim-core.zip

# Below is a description of the process for securely uploading files to
# Sourceforge, taken from https://oncletom.io/2016/travis-ssh-deploy/.
#
# The following link is a great page to learn about SSH.
# https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process
#
# Contact chrisdembia if you need the login information for opensim-bot at
# sourceforge, to manage myosin.sourceforge.net.
#
# Locally, from the root of the opensim-core repository:
# Create a 4096-bit RSA key, providing a comment.
# $ ssh-keygen -t rsa -b 4096 -C 'opensim-bot@sourceforge.net' -f ghactions_deploy_myosin_sourceforge_rsa
# When prompted for a passphrase, just hit enter (twice).
# Encrypt the private key, add decryption line to .travis.yml.
# Copy the entire contents of ghactions_deploy_myosin_sourceforge_rsa
# and add it as a Secret at https://github.com/opensim-org/opensim-core/settings/secrets,
# with the name GHACTIONS_DEPLOY_MYOSIN_SOURCEFORGE_RSA.
# Remove the private key file ghactions_deploy_myosin_sourceforge_rsa.
# DO NOT commmit the private key file.
# $ rm -f ghactions_deploy_myosin_sourceforge_rsa
# Manually, log into the sourceforge website (user opensim-bot) and add the
# public key (contents of ghactions_deploy_myosin_sourceforge_rsa.pub) in
# Account Settings > SSH Settings.
# Now you can delete the public key file from your local machine.
# $ rm -f ghactions_deploy_myosin_sourceforge_rsa.pub
